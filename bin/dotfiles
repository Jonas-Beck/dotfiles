#!/bin/bash

# color codes
NC='\033[0m'
GREEN='\033[00;32m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"

set -e

# Paths
DOTFILES_LOG="$HOME/.dotfiles.log"
DOTFILES_DIR="$HOME/dotfiles"
IS_FIRST_RUN="$HOME/.dotfiles_run"

# _header colorize the given argument with spacing
function __task {
	# if _task is called while a task was set, complete the previous
	if [[ $TASK != "" ]]; then
		printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
	fi
	# set new task title and print
	TASK=$1
	printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
	#create log if it doesn't exist
	if ! [[ -f $DOTFILES_LOG ]]; then
		touch $DOTFILES_LOG
	fi
	# empty conduro.log
	>$DOTFILES_LOG
	# hide stdout, on error we print and exit
	if eval "$1" 1>/dev/null 2>$DOTFILES_LOG; then
		return 0 # success
	fi
	# read error from log and add spacing
	printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
	while read line; do
		printf "      ${line}\n"
	done <$DOTFILES_LOG
	printf "\n"
	# remove log file
	rm $DOTFILES_LOG
	# exit installation
	exit 1
}

function _clear_task {
	TASK=""
}

function _task_done {
	printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
	_clear_task
}

function macos_setup() {
if ! [ -x "$(command -v brew)" ]; then
		__task "Installing Homebrew"
		_cmd "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
		_task_done
	else
		__task "Homebrew is already installed, skipping installation"
		_task_done
	fi
if ! [ -x "$(command -v git)" ]; then
		__task "Installing Git"
		_cmd "brew install git"
		_task_done
	else
		__task "Git is already installed, skipping installation"
		_task_done
	fi

	if ! [ -x "$(command -v ansible)" ]; then
		__task "Installing Ansible"
		_cmd "brew install ansible"
		_task_done
	else
		__task "Ansible is already installed, skipping installation"
		_task_done
	fi
}

if [ -f /etc/os-release ]; then
	source /etc/os-release
else
	if [ -x "$(command -v uname)" ]; then
		ID=$(uname -s)
	fi
fi

__task "Loading Setup for detected OS: $ID"
case $ID in
  Darwin)
    macos_setup
    ;;
  *)
    __task "Unsupported OS"
    _cmd "echo 'Unsupported OS'"
    ;;
esac

if ! [[ -d "$DOTFILES_DIR" ]]; then
  __task "Cloning repository"
  _cmd "git clone --quiet https://github.com/Jonas-Beck/dotfiles.git $DOTFILES_DIR"
  _task_done
else
  __task "Updating repository"
  _cmd "git -C $DOTFILES_DIR pull --quiet"
  _task_done
fi

pushd "$DOTFILES_DIR" 2>&1 > /dev/null

ansible-playbook "$DOTFILES_DIR/main.yml" "$@"

popd 2>&1 > /dev/null

if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  touch "$IS_FIRST_RUN"
fi
